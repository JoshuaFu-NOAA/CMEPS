@PACKAGE_INIT@

#@PROJECT_NAME@-config.cmake
#
# Valid Find COMPONENTS:
#  * STATIC - Has static targets
#  * SHARED - Has shared targets
#
# Variables provided:
#  @PROJECT_NAME@_FOUND - True if @PROJECT_NAME@ is found
#  @PROJECT_NAME@_VERSION - Version of installed @PROJECT_NAME@
#
# Targets provided:
#  @PROJECT_NAME@::@PROJECT_NAME@ - @PROJECT_NAME@ interface target aliased to SHARED|STATIC as requested or to shared libraries if available else static libraries
#
# To control finding of this package, set @PROJECT_NAME@_ROOT environment variable to the full path to the prefix
# under which @PROJECT_NAME@ was installed (e.g., /usr/local)

# Include targets file.  This will create IMPORTED target @PROJECT_NAME@
include("${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@-targets.cmake")
include("${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@-config-version.cmake")
include(CMakeFindDependencyMacro)

find_dependency(MPI)
find_dependency(ESMF MODULE)
find_dependency(PIO COMPONENTS C Fortran)

# ON/OFF implies @PROJECT_NAME@ was compiled with/without OpenMP
if(@OPENMP@)
  find_dependency(OpenMP)
endif()

set(_search_components)
set(_search_library_type)
foreach(_comp ${${CMAKE_FIND_PACKAGE_NAME}_FIND_COMPONENTS})
  if(_comp MATCHES "^(STATIC|SHARED)$")
    list(APPEND _search_library_type ${_comp})
  else()
    list(APPEND _search_components ${_comp})
  endif()
endforeach()
#set( ${CMAKE_FIND_PACKAGE_NAME}_FIND_COMPONENTS ${_search_components} )

# Ensure there is only one type of library being requested
if(_search_library_type)
  list(LENGTH _search_library_type _len)
  if(_len GREATER 1)
    message(FATAL_ERROR "User requesting both STATIC and SHARED is not permissible")
  endif()
  unset(_len)
endif()

set(@PROJECT_NAME@_LIBRARIES)
set(@PROJECT_NAME@_STATIC_LIBRARIES)
set(@PROJECT_NAME@_SHARED_LIBRARIES)

set(@PROJECT_NAME@_FOUND 0)
set(@PROJECT_NAME@_STATIC_FOUND 0)
set(@PROJECT_NAME@_SHARED_FOUND 0)

if(@CMEPS_BUILD_STATIC_LIBS@)
  set(@PROJECT_NAME@_STATIC_LIBRARIES @PROJECT_NAME@::@PROJECT_NAME@_static)
  set(@PROJECT_NAME@_STATIC_FOUND 1)
  if(@CMEPS_BUILD_SHARED_LIBS@)
    set(@PROJECT_NAME@_SHARED_LIBRARIES @PROJECT_NAME@::@PROJECT_NAME@_shared)
    set(@PROJECT_NAME@_SHARED_FOUND 1)
  endif()
elseif(@CMEPS_BUILD_SHARED_LIBS@)
  set(@PROJECT_NAME@_SHARED_LIBRARIES @PROJECT_NAME@::@PROJECT_NAME@_shared)
  set(@PROJECT_NAME@_SHARED_FOUND 1)
else()
  set(@PROJECT_NAME@_NOT_FOUND_MESSAGE "Neither CMEPS_BUILD_SHARED_LIBS nor CMEPS_BUILD_STATIC_LIBS was set.  Unable to find any libraries.")
endif()

if(NOT _search_library_type)
  if(@PROJECT_NAME@_STATIC_FOUND)
    set(_search_library_type STATIC)
  elseif(@PROJECT_NAME@_SHARED_FOUND)
    set(_search_library_type SHARED)
  endif()
endif()

if(_search_library_type MATCHES "^(SHARED)$" AND @PROJECT_NAME@_SHARED_FOUND)
  if(TARGET @PROJECT_NAME@::@PROJECT_NAME@_shared)
    add_library(@PROJECT_NAME@::@PROJECT_NAME@ ALIAS @PROJECT_NAME@:@PROJECT_NAME@_shared)
    set(@PROJECT_NAME@_FOUND 1)
  endif()
elseif(_search_library_type MATCHES "^(STATIC)$" AND @PROJECT_NAME@_STATIC_FOUND)
  if(TARGET @PROJECT_NAME@::@PROJECT_NAME@_static)
    add_library(@PROJECT_NAME@::@PROJECT_NAME@ ALIAS @PROJECT_NAME@:@PROJECT_NAME@_static)
    set(@PROJECT_NAME@_FOUND 1)
  endif()
else()

get_target_property(@PROJECT_NAME@_BUILD_TYPES @PROJECT_NAME@::@PROJECT_NAME@ IMPORTED_CONFIGURATIONS)
get_property(@PROJECT_NAME@_LIBRARIES TARGET @PROJECT_NAME@::@PROJECT_NAME@ PROPERTY LOCATION)

check_required_components("@PROJECT_NAME@")

set(@PROJECT_NAME@Version "${PACKAGE_VERSION}")
set_and_check(@PROJECT_NAME@_INSTALL_PREFIX "${PACKAGE_PREFIX_DIR}")

message(STATUS "Found @PROJECT_NAME@: \"${@PROJECT_NAME@_INSTALL_PREFIX}\" (Version: \"${@PROJECT_NAME@Version}\")")
message( STATUS "@PROJECT_NAME@ targets:" )
message(STATUS "  - @PROJECT_NAME@::@PROJECT_NAME@ [Lib: ${@PROJECT_NAME@_LIBRARIES}]")
